(module main)

(def String Type %String)
(def PID Type %U64)

(deftype Void Type)

(deftype Unit Type
  unit Unit)

# TODO
(def MessageIn Type Unit)
(def MessageOut Type Unit)

(deftype Nat Type
  Z Nat
  S (-> Nat Nat))

(deftype (Pair (T Type) (U Type)) Type
  pair (-> T U (Pair T U)))

(deftype (List (T Type)) Type
  nil (List T)
  cons (-> T (List T) (List T)))

#|
(deftype = (Pi ((T Type) (U Type)) (-> T U Type))
  refl (Pi ((T Type)) (-> T (= T T))))

(deftype (Vect (T Type)) (-> Nat Type)
  vnil (Vect T Z)
  vcons (pi n Nat (-> T (Vect T n) (Vect T (S n)))))
|#



(defun the ((T Type) (x T)) T
  x)

(defun id ((T Type) @ (x T)) T
  x)



(def State Type
  Unit)

(defun setup ((args String) (pid PID)) State
  unit)

(defun loop ((messages (List MessageIn)) (state State)) (Pair (List MessageOut) State)
  # TODO: Do something with messages other than just ignoring it.
  (pair nil state))

(defun test-1 ((x String)) String
  (the String x))

(defun test-2 ((x String)) String
  (id x))
